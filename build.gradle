//file:noinspection GroovyAssignabilityCheck
buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.1.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = "${minecraft_version}-${simpleplanes_version}"
group = 'xyz.przemyk.simpleplanes'
archivesBaseName = 'simpleplanes'

java.toolchain.languageVersion = JavaLanguageVersion.of(8)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: 'official', version: minecraft_version

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            properties 'mixin.env.remapRefMap': 'true'
            property 'mixin.env.refMapRemappingFile', "${project.projectDir}/build/createSrgToMcp/output.srg"

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                simpleplanes {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            properties 'mixin.env.remapRefMap': 'true'
            property 'mixin.env.refMapRemappingFile', "${project.projectDir}/build/createSrgToMcp/output.srg"

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                simpleplanes {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            properties 'mixin.env.remapRefMap': 'true'
            property 'mixin.env.refMapRemappingFile', "${project.projectDir}/build/createSrgToMcp/output.srg"

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'simpleplanes', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                simpleplanes {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven { name = "Progwml6 maven"; url = "https://dvs1.progwml6.com/files/maven/" } //JEI
    maven { name = "ModMaven";       url = "https://modmaven.k-4u.nl" }               // JEI fallback
    maven { name = "blamejared";     url = "https://maven.blamejared.com" }           // Patchouli
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    compileOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}:api")
    runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}")

    compileOnly fg.deobf("mezz.jei:${jei_version}:api")
    runtimeOnly fg.deobf("mezz.jei:${jei_version}")

    runtimeOnly fg.deobf("mekanism:Mekanism:${mekanism_version}")
    runtimeOnly fg.deobf("mekanism:Mekanism:${mekanism_version}:generators")
}

jar {
    manifest {
        attributes([
            "Specification-Title": project.name,
            "Specification-Vendor": "Przemyk",
            "Specification-Version": "1",
            "Implementation-Title": project.name,
            "Implementation-Version": project.version,
            "Implementation-Vendor": "Przemyk",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "MixinConfigs": "simpleplanes.mixins.json"
        ])
    }
}

jar.finalizedBy('reobfJar')